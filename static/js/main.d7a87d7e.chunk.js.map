{"version":3,"sources":["components/titles.js","components/buttons.js","components/AccordionSection.js","components/Accordion.js","components/ProjectList.js","components/projects.js","components/home.js","components/lab.js","components/error.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","class","Buttons","Button_default","href","component","Link","to","AccordionSection","onClick","_this","props","label","this","_this$props","isOpen","style","background","padding","cursor","float","marginTop","width","children","Component","Accordion","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","state","openSections","setState","defineProperty","border","map","child","components_AccordionSection","List","components_Accordion","Data","postDetail","index","Name","Date","About","variant","color","Projects","BrowserRouter","ProjectList","Home","titles","buttons","components_projects","Lab","Error","supportsHistory","window","history","App","forceRefresh","Switch","Route","path","exact","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAkBeA,SAhBA,kBAEfC,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,WAASC,MAAM,kBACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aAAX,OACIH,EAAAC,EAAAC,cAAA,OAAKC,MAAO,YAAZ,sBAA0CH,EAAAC,EAAAC,cAAA,WAA1C,mEACgEF,EAAAC,EAAAC,cAAA,WADhE,uFCmBDE,EArBC,kBAEZJ,EAAAC,EAAAC,cAAA,WAASC,MAAM,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACTH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,KAAK,8BAAb,UAGAN,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,KAAK,iFAAb,UAGAN,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQM,UAAWC,IAAMC,GAAG,QAA5B,0BCuCKC,6MA5CbC,QAAU,WACRC,EAAKC,MAAMF,QAAQC,EAAKC,MAAMC,gFAGvB,IAELH,EAEEI,KAFFJ,QAFKK,EAIHD,KADFF,MAASI,EAHJD,EAGIC,OAAQH,EAHZE,EAGYF,MAGnB,OACEd,EAAAC,EAAAC,cAAA,OACEgB,MAAO,CACLC,WAAqB,cACrBC,QAAS,aAKXpB,EAAAC,EAAAC,cAAA,OAAKS,QAASA,EAASO,MAAO,CAAEG,OAAQ,YACxCrB,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,kBACVW,GAEDd,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,CAAEI,MAAO,YAItBL,GACCjB,EAAAC,EAAAC,cAAA,OACEgB,MAAO,CACLC,WAAY,cACZI,UAAW,GACXH,QAAS,YACTI,MAAO,SAGRT,KAAKF,MAAMY,kBA5COC,aCoDhBC,cA7Cb,SAAAA,EAAYd,GAAO,IAAAD,EAAAgB,OAAAC,EAAA,EAAAD,CAAAb,KAAAY,IACjBf,EAAAgB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjB,KAAMF,KAORF,QAAU,SAAAG,GAAS,IAKXG,IALWW,OAAAK,EAAA,EAAAL,CAAAhB,GAEfsB,MAASC,aAGmBrB,GAE9BF,EAAKwB,SAAS,CACZD,aAAaP,OAAAS,EAAA,EAAAT,CAAA,GACVd,GAASG,MAjBG,OAKjBL,EAAKsB,MAAQ,CAAEC,aAFM,IAHJvB,wEAsBV,IAELD,EAGEI,KAHFJ,QACSc,EAEPV,KAFFF,MAASY,SACAU,EACPpB,KADFmB,MAASC,aAGX,OACEnC,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,CAAEoB,OAAQ,gBACnBb,EAASc,IAAI,SAAAC,GAAK,OACjBxC,EAAAC,EAAAC,cAACuC,EAAD,CACExB,SAAUkB,EAAaK,EAAM3B,MAAMC,OACnCA,MAAO0B,EAAM3B,MAAMC,MACnBH,QAASA,GAER6B,EAAM3B,MAAMY,oBA1CDC,qBC6CTgB,MA5Cf,WACE,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,iBACbH,EAAAC,EAAAC,cAACyC,EAAD,KACCC,EAAKL,IAAI,SAACM,EAAYC,GACrB,OAEA9C,EAAAC,EAAAC,cAAA,OAAKY,MAAQ+B,EAAWE,MACtB/C,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,YACbH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAX,SACQH,EAAAC,EAAAC,cAAA,WADR,UAESF,EAAAC,EAAAC,cAAA,aAIXF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACV0C,EAAWG,KADZ,IACkBhD,EAAAC,EAAAC,cAAA,WACjB2C,EAAWI,MAFZ,IAEmBjD,EAAAC,EAAAC,cAAA,WACnBF,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,cACU,KAApB0C,EAAWrC,MACZR,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQiD,QAAU,WAAWC,MAAM,UAAU7C,KAAMuC,EAAWrC,MAA9D,qBCFC4C,mLAjBT,OACIpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACArD,EAAAC,EAAAC,cAAA,WAASC,MAAM,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,qBACXH,EAAAC,EAAAC,cAACoD,EAAD,gBAPW5B,aCYR6B,EAbF,kBAETvD,EAAAC,EAAAC,cAAA,WAASC,MAAM,UACfH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACPH,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,OAEJzD,EAAAC,EAAAC,cAACwD,EAAD,QCcWC,EAtBH,kBACV3D,EAAAC,EAAAC,cAAA,WAASC,MAAM,UACfH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACTH,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,WAASC,MAAM,kBACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YAAX,wBACIH,EAAAC,EAAAC,cAAA,OAAKC,MAAO,YAAZ,0EAA8FH,EAAAC,EAAAC,cAAA,WAA9F,qCACkCF,EAAAC,EAAAC,cAAA,eAKlDF,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,WACXH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQM,UAAWC,IAAMC,GAAG,KAA5B,YCPSmD,EATD,kBACZ5D,EAAAC,EAAAC,cAAA,WAASC,MAAQ,UACjBH,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,YAAb,gCAC+BH,EAAAC,EAAAC,cAAA,WAD/B,kCCEI2D,EAAkB,cAAeC,OAAOC,QAsB/BC,mLAfX,OACIhE,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAQY,cAAeJ,GACvB7D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgE,EAAA,EAAD,KACAlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC9D,UAAWgD,IACjCvD,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAOC,KAAK,OAAOC,OAAK,EAAC9D,UAAWoD,IACpC3D,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAO5D,UAAWqD,cAXRlC,aCGE4C,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7a87d7e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => (\n\n<section>\n    <section class=\"titleContainer\">\n        <span>\n            <div class=\"mainTitle\">Hi!</div>\n                <div class =\"subTitle\"> Nice to meet you! <br />\n                I am Roshan and I like telling my computer to do things for me. <br />\n                Currently developing for UBC Launchpad! ðŸš€\n                </div>\n        </span>\n    </section>\n</section>\n\n);\n\nexport default Titles;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\n\n\n\nconst Buttons = () => (\n\n    <section class='buttonSection'>\n        <div class='buttons'>\n          <Button href=\"http://www.github.com/r614\">\n            Github\n          </Button>\n          <Button href=\"https://drive.google.com/open?id=1U8Z55E2bX1hhpHmxjPAfZA-IjWTY3Osp3-AtyjI-33w\">\n            Resume\n          </Button>\n          <Button component={Link} to=\"/lab\">\n            Lab\n          </Button>\n        </div>\n\n    </section>\n\n);\n\n\n\nexport default Buttons;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AccordionSection extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object).isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  onClick = () => {\n    this.props.onClick(this.props.label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { isOpen, label },\n    } = this;\n\n    return (\n      <div\n        style={{\n          background: isOpen ? 'transparent' : 'transparent',\n          padding: '5px 10px',\n\n\n        }}\n      >\n        <div onClick={onClick} style={{ cursor: 'pointer' }}>\n        <div class = 'AccordionTitle'>\n          {label}\n        </div>\n          <div style={{ float: 'right' }}>\n\n          </div>\n        </div>\n        {isOpen && (\n          <div\n            style={{\n              background: 'transparent',\n              marginTop: 10,\n              padding: '10px 20px',\n              width: '120%'\n              }}\n          >\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AccordionSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AccordionSection from './AccordionSection';\n\nclass Accordion extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const openSections = {};\n\n    this.state = { openSections };\n  }\n\n  onClick = label => {\n    const {\n      state: { openSections },\n    } = this;\n\n    const isOpen = !!openSections[label];\n\n    this.setState({\n      openSections: {\n        [label]: !isOpen\n      }\n    });\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { children },\n      state: { openSections },\n    } = this;\n\n    return (\n      <div style={{ border: 'transparent'  }}>\n        {children.map(child => (\n          <AccordionSection\n            isOpen={!!openSections[child.props.label]}\n            label={child.props.label}\n            onClick={onClick}\n          >\n            {child.props.children}\n          </AccordionSection>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Accordion;\n","import React from 'react';\nimport Accordion from './Accordion.js'\nimport Data from './projects.json';\nimport Button from '@material-ui/core/Button';\n\n\nfunction List(){\n  return(\n    <div class = 'ListContainer'>\n    <Accordion>\n    {Data.map((postDetail, index)=>{\n      return(\n\n      <div label= {postDetail.Name}>\n        <div class = 'listText'>\n        <div class='row'>\n          <div class='column'>\n            <div class='left-column'>\n              Date: <br />\n              About: <br />\n\n            </div>\n          </div>\n          <div class='doublecolumn'>\n            <div class='right-column'>\n            {postDetail.Date} <br />\n            {postDetail.About} <br />\n            <div class = 'gitButtons'>\n              {postDetail.Link !== \"\" &&\n              <Button variant = \"outlined\" color=\"inherit\" href={postDetail.Link}>\n                Github\n              </Button>\n              }\n            </div>\n\n\n\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n      )\n    })}\n    </Accordion>\n    </div>\n  )\n\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport List from './ProjectList.js'\n\n\n\n\nclass Projects extends Component{\n    render() {\n\n      return (\n          <Router>\n          <section class=\"projectBackground\">\n            <div class=\"projCardContainer\">\n            <List />\n            </div>\n          </section>\n          </Router>\n      );\n    }\n}\n\n\n\n\n\n\nexport default Projects;\n","import React from 'react';\nimport Titles from './titles';\nimport Buttons from './buttons';\nimport Projects from './projects.js';\n\n\nconst Home = () => (\n\n    <section class='splash'>\n    <div class='wrapper'>\n        <Titles />\n        <Buttons />\n    </div>\n    <Projects />\n    </section>\n\n\n);\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\n\n\nconst Lab = () => (\n  <section class='splash'>\n  <div class='wrapper'>\n    <section>\n        <section class=\"titleContainer\">\n            <span>\n                <div class=\"labTitle\">Woah. You are early!</div>\n                    <div class =\"subTitle\"> Currently working on plotting real time wind data with vector fields! <br />\n                    Check back later for a prototype! <br />\n                    </div>\n            </span>\n        </section>\n    </section>\n    <div class = \"buttons\">\n      <Button component={Link} to=\"/\">\n        Home\n      </Button>\n    </div>\n  </div>\n  </section>\n);\n\nexport default Lab;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst Error = () => (\n  <section class = 'splash'>\n  <div class = \"HelpText\">\n    Woah, you took a wrong turn. <br />\n    Let's get you back on track!\n  </div>\n  </section>\n);\n\nexport default Error;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Home from './components/home';\nimport Lab from './components/lab';\nimport Error from './components/error';\n\nconst supportsHistory = 'pushState' in window.history;\n\nclass App extends Component {\n\n\n  render() {\n\n    return (\n        <Router forceRefresh={!supportsHistory}>\n        <div>\n        <Switch>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/lab\" exact component={Lab} />\n        <Route component={Error} />\n        </Switch>\n        </div>\n        </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}